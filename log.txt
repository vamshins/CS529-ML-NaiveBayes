
E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
Beta value is not provided. Taking default value i.e., 1.0/vocabularyCount
    -> beta value : 1.6343073805321303E-5
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 69.51365756162559 %

Printing Confusion Matrix : 

226	0	1	0	2	0	0	0	0	0	0	0	4	5	0	5	0	2	2	32	
0	215	22	11	19	19	18	1	1	1	0	2	8	4	5	1	0	0	0	0	
0	4	123	19	2	0	4	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	7	41	246	24	3	47	0	1	1	0	1	8	1	1	0	0	0	0	0	
0	2	6	11	188	0	14	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	62	82	9	15	319	7	0	0	1	0	1	5	0	4	0	1	0	1	0	
0	0	0	3	2	0	136	2	0	0	0	0	2	0	0	0	1	0	0	0	
0	0	1	0	2	0	14	301	22	0	0	0	5	0	0	0	0	0	0	0	
0	0	0	1	1	0	4	6	309	1	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	282	1	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	3	0	0	23	373	0	0	0	1	0	1	0	0	0	
2	45	55	34	49	28	18	6	5	4	1	364	85	4	2	0	7	1	6	3	
0	3	2	28	8	0	15	3	1	0	0	0	202	3	3	0	0	0	0	0	
2	11	14	3	13	5	13	3	2	1	0	1	22	288	4	2	3	0	3	1	
3	10	8	7	6	3	16	5	1	3	0	2	17	5	319	0	1	0	4	5	
31	3	3	3	1	0	4	3	0	6	0	0	3	14	1	354	1	2	2	33	
0	1	5	0	7	1	9	9	7	5	3	7	7	6	4	0	258	1	37	9	
18	7	6	6	13	6	23	13	19	13	10	5	13	24	15	12	22	354	29	11	
11	17	21	9	31	6	33	42	28	56	11	12	8	38	33	14	58	15	221	18	
24	0	1	1	0	0	2	0	1	0	0	0	0	1	0	10	11	0	5	139	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have we as were by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about edu had do my car them has writes window so me your his encryption turkish com article armenian when more scsi drive team out don jews israeli said think armenians file jesus president game nasa mr hockey chip been just image some government db which any use graphics clipper bike up only 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.00001 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 1.0E-5
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 69.74017321785476 %

Printing Confusion Matrix : 

227	0	1	0	2	0	0	0	0	0	0	1	4	5	0	5	0	2	3	32	
0	214	22	11	19	21	18	1	1	1	0	2	8	6	5	1	0	0	0	0	
0	4	124	20	2	0	4	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	8	42	246	25	3	48	0	1	1	0	1	8	1	1	0	0	0	0	0	
0	2	6	11	189	0	14	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	62	81	8	15	318	6	0	0	1	0	1	5	0	4	0	1	0	1	0	
0	0	0	3	2	0	137	2	0	0	0	0	2	0	0	0	1	0	0	0	
0	0	1	0	2	0	13	302	22	0	0	0	5	0	0	0	0	0	0	0	
0	0	0	1	1	0	4	6	312	1	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	285	2	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	3	0	0	23	375	0	0	0	1	0	1	0	0	0	
2	47	55	33	49	27	18	6	5	4	1	364	85	4	2	1	7	1	6	3	
0	3	2	29	8	0	15	4	1	0	0	0	205	3	3	0	0	0	0	0	
2	11	14	3	12	5	13	3	1	1	0	1	23	287	4	2	3	0	3	1	
3	10	8	7	6	3	16	5	1	3	0	2	18	5	322	0	1	0	4	5	
32	3	3	3	1	0	4	3	0	6	0	0	3	15	1	354	1	2	2	33	
0	1	5	0	6	1	10	9	7	5	3	7	6	6	4	0	259	1	37	9	
17	7	5	6	13	6	22	13	17	12	8	5	9	21	13	12	21	355	29	11	
10	15	21	9	31	6	33	40	28	54	10	11	8	38	32	13	58	14	220	18	
24	0	1	1	0	0	2	0	1	0	0	0	0	2	0	10	11	0	5	139	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have we as were by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about edu had do my car them has writes window so me your his encryption turkish com article armenian when more scsi drive team out don jews israeli said think armenians file jesus president game nasa mr hockey chip been just image some government db which any use graphics clipper bike up only 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.00005 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 5.0E-5
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 68.8074616922052 %

Printing Confusion Matrix : 

224	0	1	0	2	0	0	0	0	0	0	0	5	5	0	5	0	2	1	32	
0	211	21	11	18	18	16	1	1	1	0	1	8	5	3	1	0	0	0	1	
0	4	118	19	2	0	4	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	7	41	239	24	3	47	0	1	0	0	1	6	1	1	0	0	0	0	0	
0	2	5	10	184	0	15	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	64	86	8	13	320	7	0	0	1	0	1	5	0	4	0	1	0	1	0	
0	0	0	3	2	0	133	2	0	0	0	0	2	0	0	0	1	0	0	0	
0	0	1	0	2	0	15	294	20	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	1	1	0	4	5	306	1	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	275	1	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	3	0	0	23	372	0	0	0	1	0	1	0	0	0	
2	47	56	39	51	28	19	8	5	5	1	365	97	2	3	0	7	1	6	3	
0	2	2	26	8	0	15	3	1	0	0	0	193	3	3	0	0	0	0	0	
2	11	12	4	12	5	13	3	2	0	0	1	22	284	4	2	3	0	3	1	
3	10	8	7	5	3	17	5	0	3	0	2	13	5	318	0	1	0	3	5	
32	3	3	3	2	0	3	3	0	6	0	0	3	13	0	354	1	2	2	33	
0	1	5	0	9	0	8	11	8	4	3	6	7	6	4	0	256	1	35	10	
18	7	6	8	13	6	23	13	21	12	11	7	15	25	16	13	25	354	29	10	
12	18	25	12	35	7	35	46	31	66	11	11	9	43	35	14	58	15	225	17	
24	0	1	1	0	0	3	0	1	0	0	0	0	1	0	9	10	0	5	139	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have we as were by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about edu had do my car them has window writes me so your his encryption turkish com article armenian when more scsi drive team out don jews israeli said think armenians file jesus game president nasa hockey mr chip been just image some government db which any use graphics clipper bike up only 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.0001 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 1.0E-4
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 68.3411059293804 %

Printing Confusion Matrix : 

224	0	1	0	2	0	0	0	0	0	0	0	5	5	0	4	0	2	1	33	
0	209	20	10	18	17	16	1	1	1	0	1	8	5	2	1	0	0	0	1	
0	3	117	18	2	0	4	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	7	41	240	23	3	47	0	0	0	0	1	6	1	1	0	0	0	0	0	
0	2	5	8	180	0	15	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	66	88	9	13	318	7	0	0	1	0	1	4	0	4	0	1	0	0	0	
0	0	0	2	2	0	133	2	0	0	0	0	2	0	0	0	1	0	0	0	
0	0	1	0	2	0	15	288	18	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	1	0	0	4	4	305	1	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	269	1	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	3	0	0	23	369	0	0	0	1	0	1	0	0	0	
1	48	58	41	52	31	21	9	5	6	1	365	99	2	3	0	7	1	6	3	
0	2	2	24	8	0	14	2	1	0	0	0	188	3	3	0	0	0	0	0	
2	11	10	5	12	5	13	3	2	0	0	1	22	281	4	2	3	0	4	1	
3	10	7	6	7	3	15	5	0	3	0	2	13	5	317	0	1	0	3	5	
32	3	3	3	2	0	3	3	0	6	0	0	3	14	0	354	1	2	2	35	
0	1	5	0	7	0	8	11	7	3	3	6	7	6	4	0	255	1	34	9	
19	7	6	11	13	6	23	14	22	13	12	7	16	26	17	13	26	354	28	10	
12	18	26	12	40	7	37	52	34	71	13	11	12	44	36	16	58	15	227	18	
24	0	1	1	0	0	2	0	2	0	0	0	0	1	0	8	10	0	5	136	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have we as were by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about edu had do my car them has window writes me so your his encryption turkish com article armenian when more scsi drive team out don jews israeli said think armenians file jesus game president nasa hockey chip mr been image just some government db which any use graphics clipper bike up only 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.0005 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 5.0E-4
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 67.18187874750167 %

Printing Confusion Matrix : 

224	0	1	0	2	0	0	0	0	0	0	0	4	5	0	4	0	1	1	33	
0	202	17	7	16	15	15	1	1	1	0	1	7	5	2	1	0	0	0	1	
0	3	111	16	1	0	3	1	0	0	0	0	0	0	0	0	0	0	0	0	
0	7	39	233	22	2	45	0	0	0	0	1	4	0	1	0	0	0	0	0	
0	2	5	8	172	0	14	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	66	89	12	14	320	8	0	0	1	0	1	6	0	4	0	1	0	0	0	
0	0	0	2	1	0	125	2	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	1	0	2	0	14	279	17	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	1	0	0	3	4	297	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	262	1	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	3	0	0	22	366	0	0	0	1	0	1	0	0	0	
2	55	63	52	61	30	28	9	6	6	1	365	104	1	4	0	6	1	6	3	
0	1	2	20	7	0	13	1	1	0	0	0	179	3	3	0	0	0	0	0	
1	10	6	6	8	5	13	4	3	1	0	1	20	273	3	2	3	0	1	1	
3	9	7	3	5	3	13	5	0	2	0	1	12	5	313	0	1	0	4	5	
32	3	3	4	3	0	4	4	0	6	0	0	4	14	1	356	1	2	2	38	
0	1	3	0	7	0	7	13	8	4	2	5	6	6	4	0	253	1	34	9	
23	8	8	13	20	7	29	17	24	14	13	8	21	31	18	13	27	355	32	11	
11	20	35	14	42	8	40	55	39	78	16	12	20	49	38	16	60	15	226	19	
21	0	1	0	0	0	3	0	1	0	0	0	0	1	0	6	10	0	4	131	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have as we were by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about edu had my do car them has window me writes so your his encryption turkish com article armenian when more scsi drive team out don jews israeli said think armenians file jesus game nasa hockey chip president mr been some image government db which any just use graphics clipper bike only up 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.001 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.001
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 66.46235842771485 %

Printing Confusion Matrix : 

223	0	1	0	2	0	0	0	0	0	0	0	4	4	0	4	0	1	1	34	
0	199	15	7	16	15	15	1	1	1	0	1	7	5	2	1	0	0	0	1	
0	3	107	16	1	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	7	40	233	23	1	44	0	0	0	0	1	4	0	0	0	0	0	0	0	
0	1	5	8	162	0	14	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	67	89	12	14	321	8	0	0	1	0	1	6	0	4	0	1	0	0	0	
0	0	0	2	1	0	123	1	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	1	0	2	0	15	274	16	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	1	0	0	3	4	288	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	0	0	259	1	0	0	0	0	0	0	1	0	0	
0	2	0	1	0	0	1	0	0	23	365	0	0	0	1	0	1	0	0	0	
2	59	65	52	64	30	31	9	5	5	1	366	108	2	5	0	6	1	6	3	
0	0	2	20	8	0	13	1	1	0	0	0	169	3	2	0	0	0	0	0	
1	9	6	5	8	5	13	4	3	1	0	1	17	270	2	2	2	0	0	1	
3	8	7	3	6	3	13	5	0	2	0	1	10	4	310	0	1	0	4	5	
35	3	2	4	3	0	4	4	0	6	0	0	5	15	2	360	2	2	2	41	
0	1	3	0	8	0	7	14	9	5	2	2	9	6	4	0	254	1	33	9	
23	8	10	14	22	7	30	22	31	17	14	9	27	34	22	14	30	355	35	13	
11	22	37	14	43	8	40	56	43	77	16	13	21	49	38	14	59	15	225	19	
19	0	1	0	0	0	3	0	0	0	0	0	0	1	0	3	7	0	4	125	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was for not be are on this have as were we by god from with but he there space or key their if can will all people who at what windows an no israel gun would one about had edu my do car them window me has so writes his encryption your turkish armenian com article when scsi more drive team out jews don israeli said armenians file think jesus game nasa hockey chip president mr some government image db been which any just use graphics clipper bike only then 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.005 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.005
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 64.62358427714857 %

Printing Confusion Matrix : 

209	0	1	0	1	0	0	0	0	0	0	0	2	4	0	2	0	1	1	33	
0	187	11	5	13	14	12	1	1	1	0	1	5	4	2	1	0	0	0	1	
0	0	99	11	1	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	6	40	233	23	1	45	0	0	0	0	1	2	1	0	0	0	0	0	0	
0	1	3	6	149	0	12	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	75	94	15	16	322	8	0	0	1	0	1	6	1	5	0	0	0	0	0	
0	0	0	2	1	0	112	1	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	2	0	18	265	12	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	1	0	0	2	2	278	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	0	0	252	1	0	0	0	0	0	0	0	0	0	
0	2	0	1	0	0	1	0	0	22	359	0	0	0	1	0	1	0	0	0	
1	71	77	62	77	33	46	14	7	7	1	366	123	4	5	0	6	1	6	4	
0	0	2	18	5	0	13	0	1	0	0	0	157	3	2	0	0	0	0	0	
1	8	5	6	7	4	11	3	4	1	0	0	15	264	2	2	1	0	0	1	
3	8	8	2	6	3	13	4	0	2	0	1	8	4	308	0	1	0	4	5	
52	3	4	4	4	0	4	4	1	8	0	0	5	18	3	369	3	1	3	63	
0	2	3	0	8	0	6	14	10	4	2	2	9	5	4	0	255	1	35	10	
33	11	13	17	31	7	42	38	51	29	23	13	38	51	31	16	48	364	49	25	
10	15	31	9	39	6	33	49	32	70	13	10	17	34	29	8	45	8	212	19	
8	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	3	0	0	90	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was not be for are on this have as were by we god from with but he there space or key their if can will all people who at windows what an no israel gun one would edu had my do car them about window me his encryption has so turkish writes armenian when scsi team drive your com article out more jews israeli said file jesus don armenians game hockey nasa chip think some government db image which any use president mr been graphics clipper bike just only then 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.01 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.01
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 63.717521652231845 %

Printing Confusion Matrix : 

204	0	1	0	0	0	0	0	0	0	0	0	2	3	0	2	0	1	1	31	
0	182	10	5	12	14	10	1	1	1	0	1	3	4	1	1	0	0	0	1	
0	0	92	8	1	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	6	38	229	21	1	46	0	0	0	0	1	2	0	0	0	0	0	0	0	
0	1	3	5	136	0	11	0	0	0	0	0	1	0	0	0	0	0	0	0	
1	76	97	17	21	321	9	0	0	1	0	1	4	1	5	0	0	0	0	0	
0	0	0	2	1	0	111	1	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	2	0	18	262	12	0	0	0	4	0	0	0	0	0	0	0	
0	0	0	0	0	0	2	2	271	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	0	0	246	1	0	0	0	0	0	0	0	0	0	
0	2	0	1	0	0	1	0	0	22	358	0	0	0	1	0	1	0	0	0	
1	78	91	70	90	36	49	14	7	10	2	369	134	5	7	0	6	1	6	6	
0	0	2	15	6	0	12	1	1	0	0	0	150	3	2	0	0	0	0	0	
1	6	3	5	7	4	11	3	5	1	0	0	14	265	2	2	0	0	0	1	
3	9	8	2	6	3	12	5	1	3	1	1	9	5	310	0	1	0	4	5	
59	3	4	4	5	0	6	4	1	8	1	1	7	19	3	371	3	1	3	79	
0	2	3	0	7	0	6	12	8	5	2	2	10	5	4	0	261	1	33	11	
36	11	15	20	35	8	47	49	60	43	24	15	39	56	35	18	53	366	55	29	
8	13	24	9	33	3	28	41	30	57	10	4	13	27	22	4	36	6	208	18	
5	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	70	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they was not be for are this on as were have by god we from with but he there space or key if their can will all people who at windows what an no israel one gun would edu had do car my them about window me his encryption turkish so has armenian writes when scsi team drive com your out article jews israeli said more file jesus armenians game hockey nasa chip don some government db image think which use any graphics been bike president clipper mr only then just 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.05 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.05
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 59.533644237175224 %

Printing Confusion Matrix : 

160	0	0	0	0	0	0	0	0	0	0	0	0	3	0	1	0	0	0	24	
0	168	8	3	9	10	7	1	1	1	0	1	0	3	1	1	0	0	0	0	
0	1	67	7	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	35	206	22	1	45	0	0	0	0	1	1	0	0	0	0	0	0	0	
0	0	3	4	109	0	9	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	76	110	19	19	321	11	0	0	2	0	1	4	2	4	0	0	0	0	0	
0	0	0	1	1	0	104	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	2	0	20	242	12	0	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	1	243	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	0	0	227	1	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	1	0	24	355	0	0	0	1	0	1	0	0	0	
2	98	110	96	113	40	63	15	13	13	2	367	161	8	11	1	8	1	7	8	
0	0	1	11	4	0	9	0	1	0	0	0	126	2	2	0	0	0	0	0	
1	3	3	5	7	4	10	2	3	1	0	0	12	253	2	1	0	0	0	1	
2	7	8	4	6	3	10	5	1	3	1	0	9	4	300	0	1	0	4	4	
91	9	8	5	6	1	9	5	4	11	1	2	10	24	7	371	5	1	4	104	
1	2	3	0	7	0	7	10	8	6	2	2	6	2	3	1	253	2	33	9	
49	17	24	25	58	8	59	86	90	81	29	18	52	83	51	20	78	370	77	49	
8	3	11	5	19	2	16	27	21	28	8	3	8	9	10	2	16	2	185	11	
2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	41	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one gun do would car had my them window his me encryption about turkish armenian team scsi when drive so com has writes out your jews israeli said file jesus game article hockey armenians nasa chip more some government db image which use don any graphics been bike clipper think other only year then president 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.1 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.1
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 57.01532311792139 %

Printing Confusion Matrix : 

146	0	0	0	0	0	0	0	0	0	0	0	0	3	0	1	0	0	0	20	
0	154	6	4	7	10	7	1	0	1	0	1	0	3	1	0	0	0	0	0	
0	1	58	6	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	31	197	22	1	48	0	0	0	0	1	1	0	0	0	0	0	0	0	
0	0	1	5	96	0	8	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	76	113	19	20	314	10	0	0	2	0	1	4	2	4	1	0	0	0	0	
0	0	0	0	1	0	99	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	0	0	19	227	8	0	0	0	3	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	1	222	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	0	0	212	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	25	349	0	0	0	1	0	1	0	0	0	
3	108	118	101	125	45	67	18	16	13	2	365	166	9	13	1	9	1	7	7	
0	0	1	9	3	0	9	0	1	0	0	0	115	2	2	0	0	0	0	0	
2	2	3	4	4	3	7	2	3	1	0	0	11	247	2	0	0	0	0	1	
2	5	8	4	6	3	9	4	1	2	1	0	9	2	296	0	1	0	3	5	
102	10	7	6	7	1	9	5	6	9	2	2	10	24	9	369	5	1	5	112	
1	1	3	0	5	0	8	11	8	6	2	2	5	2	2	0	236	2	29	8	
53	25	32	33	74	11	64	104	123	102	37	21	61	92	55	25	98	371	89	58	
6	2	10	3	12	2	15	22	9	24	6	2	7	7	7	1	12	1	177	11	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	29	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption me about turkish armenian team scsi when drive so com has out your writes jews israeli said jesus file game hockey armenians nasa chip article some more government db image which use any don graphics bike clipper been think other year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.15 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.15
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 55.096602265156555 %

Printing Confusion Matrix : 

136	0	0	0	0	0	0	0	0	0	0	0	0	2	0	1	0	0	0	21	
0	146	5	3	7	10	8	1	0	1	0	1	0	3	1	0	0	0	0	0	
0	0	55	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	31	191	22	1	46	0	0	0	0	1	1	0	0	0	0	0	0	0	
0	0	0	4	85	0	8	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	78	115	18	18	313	10	0	0	2	0	1	4	2	3	1	0	0	0	0	
0	0	0	0	1	0	97	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	0	0	19	213	4	0	0	0	2	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	1	210	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	203	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	25	342	0	0	0	1	0	1	0	0	0	
3	113	121	113	124	47	73	16	17	14	2	365	170	9	14	1	10	1	7	7	
0	0	1	8	3	0	8	0	0	0	0	0	98	2	2	0	0	0	0	0	
2	2	3	4	5	3	6	2	3	1	0	0	11	236	2	0	0	0	0	1	
2	5	8	4	4	2	6	5	1	2	1	0	10	2	291	0	1	0	3	5	
106	9	7	6	11	1	8	5	6	11	3	2	9	25	10	367	5	1	6	114	
1	1	3	0	4	0	7	10	8	6	2	1	4	2	1	0	227	2	29	8	
58	28	35	32	87	11	70	123	140	113	44	22	76	106	62	27	109	371	98	65	
7	2	7	3	11	2	14	19	8	19	5	2	7	4	5	1	9	1	167	8	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	22	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption me about turkish armenian team scsi drive when so com has out your writes jews israeli said jesus file game hockey nasa chip armenians article some government db more image which use any don graphics bike clipper been think other year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.2 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.2
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 53.85742838107927 %

Printing Confusion Matrix : 

132	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	21	
0	139	4	3	6	10	7	1	0	1	0	1	0	3	1	0	0	0	0	0	
0	0	52	4	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	30	190	23	1	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	4	83	0	6	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	78	115	18	19	311	9	0	0	2	0	1	4	2	3	1	0	0	0	0	
0	0	0	0	1	0	95	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	0	0	19	200	5	0	0	0	2	0	0	0	0	0	0	0	
0	0	0	0	0	0	1	1	201	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	191	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	24	333	0	0	0	1	0	1	0	0	0	
2	117	127	119	125	49	79	16	17	13	1	365	173	11	15	1	10	1	7	7	
0	0	0	6	3	0	6	0	0	0	0	0	91	1	2	0	0	0	0	0	
2	1	1	3	4	3	6	2	3	1	1	0	10	230	2	0	0	0	0	0	
2	5	8	3	3	2	7	5	1	2	1	0	11	2	286	0	0	0	3	3	
106	9	7	5	11	1	7	5	6	12	2	2	10	26	11	364	6	1	6	114	
1	1	4	0	4	0	6	10	8	5	2	1	3	1	1	0	222	2	28	8	
64	32	36	33	90	11	74	137	149	128	54	23	81	111	67	31	115	370	101	70	
6	2	7	3	10	2	12	18	7	18	5	2	6	4	3	1	8	2	165	6	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	22	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption me about turkish team armenian scsi drive when so com has out your writes jews israeli said jesus file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been think other year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.25 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.25
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 52.93804130579613 %

Printing Confusion Matrix : 

128	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	20	
0	135	4	3	6	9	7	1	0	1	0	1	0	2	1	0	0	0	0	0	
0	0	49	4	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	31	186	25	1	48	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	4	75	0	6	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	79	112	18	21	310	10	0	0	1	0	1	4	2	3	1	0	0	0	0	
0	0	0	0	1	0	92	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	0	0	19	192	4	0	0	0	2	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	198	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	184	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	331	0	0	0	1	0	1	0	0	0	
2	120	128	122	128	49	80	19	16	14	1	363	173	11	14	1	10	1	7	5	
0	0	0	6	3	0	5	0	0	0	0	0	83	1	1	0	0	0	0	0	
2	1	1	3	3	2	6	2	3	1	1	0	9	226	2	0	0	0	0	0	
1	4	7	3	2	2	7	3	1	2	1	0	12	2	284	0	0	0	3	3	
106	9	7	5	11	1	7	5	4	11	2	2	9	27	11	364	7	1	6	118	
1	1	4	0	2	0	6	10	8	3	1	1	3	1	1	0	220	2	26	8	
70	33	40	34	97	14	77	144	157	141	58	25	91	116	70	31	116	370	105	71	
5	2	8	3	8	2	11	18	6	18	4	2	5	4	4	1	8	2	163	6	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	20	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com has out your writes jews israeli said jesus file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been think other year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.3 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.3
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 51.88540972684876 %

Printing Confusion Matrix : 

125	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	19	
0	133	3	3	5	9	7	1	0	1	0	1	0	2	1	0	0	0	0	0	
0	0	47	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	31	181	25	1	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	73	0	6	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	79	112	19	20	308	11	0	0	3	0	1	4	2	3	1	0	0	0	0	
0	0	0	0	1	0	86	0	0	0	0	0	1	0	0	0	1	0	0	0	
0	0	0	0	0	0	18	184	4	0	0	0	2	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	190	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	0	175	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	22	327	0	0	0	1	0	1	0	0	0	
2	122	130	126	132	49	85	19	14	12	1	361	174	11	13	1	10	1	7	6	
0	0	0	5	3	0	5	0	0	0	0	0	79	1	1	0	0	0	0	0	
2	1	1	3	3	1	6	3	3	1	1	0	8	216	2	0	0	0	0	0	
0	3	7	3	2	2	7	3	1	2	1	0	11	2	282	0	0	0	3	3	
108	10	7	3	12	1	7	4	3	11	2	2	9	29	11	364	6	1	5	119	
1	1	4	0	2	0	6	11	10	3	1	1	3	1	1	0	215	2	21	8	
72	33	41	37	96	17	79	152	166	149	63	27	96	122	73	31	125	370	114	72	
5	2	8	3	8	2	11	17	6	18	3	2	5	6	4	1	5	2	160	6	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	18	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com has out your writes jews israeli said jesus file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been think other year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.35 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.35
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 51.00599600266489 %

Printing Confusion Matrix : 

123	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	19	
0	131	4	3	5	9	7	1	0	1	0	1	0	2	1	0	0	0	0	0	
0	0	42	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	30	180	24	1	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	71	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
1	79	114	19	21	307	11	0	0	3	0	1	5	2	3	1	0	0	0	0	
0	0	0	0	1	0	85	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	18	175	4	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	185	0	0	0	0	0	0	0	1	0	0	0	
0	0	0	0	0	0	0	0	0	170	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	22	319	0	0	0	1	0	1	0	0	0	
2	124	134	127	131	49	84	21	14	12	1	360	175	12	14	1	9	1	7	6	
0	0	0	5	3	0	5	0	0	0	0	0	76	1	1	0	0	0	0	0	
2	0	1	3	3	1	6	3	3	1	1	0	7	208	2	0	0	0	0	0	
0	3	6	3	2	2	7	3	1	2	1	0	11	2	278	0	0	0	3	2	
110	10	7	3	12	1	7	5	3	11	2	2	9	30	11	364	6	1	5	121	
1	0	4	0	1	0	5	11	9	3	1	1	3	1	1	0	211	2	20	8	
72	35	42	38	101	18	81	158	172	156	72	28	100	131	76	31	130	370	119	73	
5	2	7	3	7	2	11	17	6	16	2	2	4	4	4	1	5	2	156	5	
1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	17	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other think year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.4 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.4
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 50.19320453031313 %

Printing Confusion Matrix : 

120	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	19	
0	131	4	3	5	9	7	0	0	1	0	1	0	2	1	0	0	0	0	0	
0	0	42	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	30	174	24	0	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	69	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	79	113	19	21	304	13	1	0	3	0	1	5	2	3	1	0	0	0	0	
0	0	0	0	1	0	84	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	18	166	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	182	0	0	0	0	0	0	0	1	0	0	0	
0	0	0	0	0	0	0	0	0	164	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	22	315	0	0	0	1	0	1	0	0	0	
2	124	136	133	130	52	84	23	15	11	1	358	173	12	14	1	9	1	6	6	
0	0	0	5	3	0	5	0	0	0	0	0	72	1	1	0	0	0	0	0	
2	0	1	2	2	1	5	2	3	1	1	0	7	205	3	0	0	0	0	0	
0	3	5	3	2	2	7	3	1	2	1	0	12	1	274	0	0	0	3	2	
112	10	7	3	12	1	7	5	3	11	2	2	9	30	10	364	6	1	5	119	
1	0	4	0	1	0	5	10	9	4	1	1	3	1	1	0	204	2	20	8	
75	35	42	39	104	19	82	167	175	161	76	30	106	135	80	31	137	370	123	76	
5	2	7	3	8	2	10	17	5	17	2	2	4	4	4	1	5	2	153	5	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	16	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other think year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.45 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.45
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 49.64690206528981 %

Printing Confusion Matrix : 

118	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	19	
0	129	4	2	4	9	8	0	0	1	0	0	0	2	1	0	0	0	0	0	
0	0	42	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	30	172	24	0	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	67	0	6	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	78	113	18	20	304	13	1	0	4	0	1	5	2	3	1	0	0	0	0	
0	0	0	0	1	0	84	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	18	163	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	180	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	160	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	313	0	0	0	1	0	1	0	0	0	
2	127	135	135	131	51	84	22	15	11	1	359	175	11	14	1	9	1	6	7	
0	0	0	5	2	0	5	0	0	0	0	0	67	1	1	0	0	0	0	0	
2	0	1	1	2	1	5	2	3	1	1	0	6	198	3	0	0	0	0	0	
0	3	5	3	2	2	6	3	1	2	1	0	11	1	270	0	0	0	3	2	
113	10	7	3	13	1	7	5	4	11	2	2	9	30	11	364	6	1	5	118	
1	0	2	0	1	0	5	10	9	4	1	1	3	1	1	0	201	2	20	7	
76	36	44	42	107	20	84	172	176	168	78	30	111	143	83	31	140	370	126	78	
5	1	7	3	8	2	9	16	5	14	2	2	4	4	4	1	5	2	150	5	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	15	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other think year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.5 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.5
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 48.95403064623584 %

Printing Confusion Matrix : 

115	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	19	
0	129	4	2	4	9	8	0	0	1	0	0	0	2	1	0	0	0	0	0	
0	0	40	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	29	168	25	0	46	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	65	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	77	114	18	18	303	13	1	0	4	0	1	5	2	3	1	0	0	0	0	
0	0	0	0	1	0	83	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	18	154	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	180	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	152	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	310	0	0	0	1	0	1	0	0	0	
2	126	134	140	132	52	87	21	15	11	1	358	176	12	15	1	9	1	6	7	
0	0	0	3	2	0	5	0	0	0	0	0	64	1	0	0	0	0	0	0	
2	0	1	1	2	1	5	2	3	1	1	0	6	191	3	0	0	0	0	0	
0	3	5	3	2	2	4	1	1	2	1	0	11	1	267	0	0	0	3	2	
115	11	7	3	13	1	7	5	4	12	2	2	9	28	11	364	6	1	5	119	
1	0	3	0	1	0	5	11	9	4	1	1	3	1	1	0	198	2	19	7	
77	38	47	43	109	20	84	182	176	176	81	31	113	150	86	31	143	370	128	78	
5	0	6	3	8	2	9	17	5	13	2	2	4	4	4	1	5	2	149	5	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	14	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other think year only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.55 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.55
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 48.32778147901399 %

Printing Confusion Matrix : 

109	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	18	
0	125	4	2	4	9	8	0	0	1	0	0	0	2	1	0	0	0	0	0	
0	0	40	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	29	166	25	0	47	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	64	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	78	112	17	18	302	13	1	0	4	0	1	5	1	3	1	0	0	0	0	
0	0	0	0	1	0	82	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	18	151	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	173	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	151	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	307	0	0	0	1	0	1	0	0	0	
2	129	137	139	131	53	87	21	15	11	1	356	175	15	14	1	9	1	6	7	
0	0	0	3	2	0	5	0	0	0	0	0	62	1	0	0	0	0	0	0	
2	0	1	1	2	1	5	2	3	1	1	0	6	187	3	0	0	0	0	0	
0	2	4	3	2	2	4	1	1	2	1	0	11	1	262	0	0	0	2	2	
120	11	7	4	12	1	7	5	4	12	2	2	8	28	11	365	6	1	5	119	
1	0	3	1	1	0	5	10	9	4	1	1	3	1	0	0	195	2	18	7	
78	39	48	46	113	20	84	187	183	177	84	34	116	152	93	30	146	370	133	80	
5	0	5	2	7	2	9	16	5	13	2	1	5	4	4	1	5	2	146	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	14	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.6 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.6
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 47.75483011325783 %

Printing Confusion Matrix : 

103	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	18	
0	120	4	2	4	9	8	0	0	1	0	0	0	2	1	0	0	0	0	0	
0	0	39	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	164	25	0	48	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	2	63	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	77	110	17	19	300	13	1	0	4	0	1	4	1	2	0	0	0	0	0	
0	0	0	0	1	0	79	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	16	147	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	172	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	145	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	22	306	0	0	0	0	0	1	0	0	0	
3	133	137	139	130	55	86	20	15	11	1	356	176	16	16	1	9	1	6	7	
0	0	0	3	2	0	5	0	0	0	0	0	62	0	0	0	0	0	0	0	
2	0	1	1	2	1	5	2	3	1	1	0	5	183	3	0	0	0	0	0	
0	2	4	3	2	2	4	1	1	2	1	0	11	1	259	0	0	0	1	2	
120	11	6	5	12	1	7	5	4	12	2	2	8	28	11	366	6	1	5	120	
1	0	3	1	1	0	4	12	8	4	1	1	3	0	0	0	192	2	18	7	
83	41	53	47	114	20	90	190	185	183	85	34	117	157	96	30	149	371	136	80	
5	0	5	2	7	2	9	16	5	12	2	1	5	4	4	1	5	1	144	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.65 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.65
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 47.18187874750166 %

Printing Confusion Matrix : 

103	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	17	
0	116	4	2	4	9	9	0	0	1	0	0	0	2	1	0	0	0	0	0	
0	0	38	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	160	25	0	49	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	63	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	77	108	17	19	299	13	1	0	4	0	1	6	1	2	0	0	0	0	0	
0	0	0	0	1	0	76	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	15	141	5	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	167	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	141	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	22	306	0	0	0	0	0	1	0	0	0	
3	136	139	141	128	56	86	20	16	11	1	354	180	15	16	1	9	1	6	7	
0	0	0	2	2	0	5	0	0	0	0	0	55	0	0	0	0	0	0	0	
2	0	1	1	2	1	5	1	2	1	1	0	5	181	2	0	0	0	0	0	
0	2	4	3	2	2	4	1	1	2	1	0	10	1	257	0	0	0	1	2	
120	11	6	5	12	1	7	5	4	12	2	2	8	28	11	365	6	1	5	120	
1	0	3	1	1	0	3	12	7	4	1	1	3	0	0	0	192	2	18	7	
83	42	54	49	116	20	93	197	190	187	85	36	119	160	99	31	150	371	137	81	
5	0	5	2	7	2	9	16	5	12	2	1	5	4	4	1	4	1	143	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.7 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.7
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 46.79546968687542 %

Printing Confusion Matrix : 

102	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	17	
0	116	4	2	4	9	9	0	0	1	0	0	1	2	1	0	0	0	0	0	
0	0	36	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	159	24	0	49	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	62	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	77	108	18	19	297	13	1	0	4	0	1	6	1	2	0	0	0	0	0	
0	0	0	0	1	0	76	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	137	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	162	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	0	0	0	138	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	306	0	0	0	0	0	1	0	0	0	
3	135	141	141	129	56	87	20	17	11	1	354	181	15	16	1	9	1	6	7	
0	0	0	2	2	0	5	0	0	0	0	0	52	0	0	0	0	0	0	0	
2	0	2	1	2	1	5	1	2	1	1	0	5	180	2	0	0	0	0	0	
0	2	3	3	2	2	4	1	1	2	1	0	10	0	255	0	0	0	1	2	
120	10	6	6	12	1	7	5	4	11	2	2	8	28	11	365	6	1	5	117	
1	0	3	1	1	0	3	12	6	4	1	1	3	0	0	0	191	2	18	7	
84	44	54	51	117	22	93	201	197	192	85	36	120	162	101	31	151	371	140	84	
5	0	5	2	7	2	9	16	4	12	2	1	5	4	4	1	4	1	140	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.75 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.75
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 46.462358427714854 %

Printing Confusion Matrix : 

101	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	17	
0	116	4	2	3	9	9	0	0	1	0	0	1	2	1	0	0	0	0	0	
0	0	36	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	158	22	0	49	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	58	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	74	107	18	18	297	13	1	0	4	0	1	6	0	2	0	0	0	0	0	
0	0	0	0	1	0	75	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	134	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	162	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	1	0	0	137	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	21	306	0	0	0	0	0	1	0	0	0	
3	137	141	142	136	56	86	19	17	11	1	353	181	16	16	1	9	1	6	7	
0	0	0	2	2	0	5	0	0	0	0	0	51	0	0	0	0	0	0	0	
1	0	2	1	2	1	5	1	2	1	1	0	5	175	2	0	0	0	0	0	
0	2	3	3	2	2	4	1	1	2	1	0	10	0	251	0	0	0	1	2	
120	10	6	6	11	1	7	5	3	10	2	2	8	28	10	365	6	1	5	115	
1	0	3	1	2	0	3	12	6	4	1	1	3	0	0	0	189	2	17	7	
86	45	55	51	119	22	94	205	198	194	85	37	121	167	105	31	153	371	142	86	
5	0	5	2	6	2	9	16	4	12	2	1	5	4	5	1	4	1	139	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.8 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.8
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 45.99600266489007 %

Printing Confusion Matrix : 

98	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	17	
0	113	4	2	3	9	8	0	0	1	0	0	2	2	1	0	0	0	0	0	
0	0	35	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	157	22	0	50	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	57	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	75	108	19	18	295	14	1	0	4	0	1	6	0	2	0	0	0	0	0	
0	0	0	0	1	0	73	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	131	4	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	156	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	1	0	0	134	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	20	305	0	0	0	0	0	1	0	0	0	
3	138	142	142	136	56	86	18	17	11	1	353	180	16	15	1	9	1	5	7	
0	0	0	1	2	0	5	0	0	0	0	0	49	0	0	0	0	0	0	0	
1	0	2	1	2	1	5	1	2	1	1	0	4	172	2	0	0	0	0	0	
0	2	3	3	2	2	4	1	1	2	1	0	9	0	250	0	0	0	1	2	
120	10	5	6	11	1	7	6	3	10	2	2	9	28	10	365	8	1	4	115	
1	0	3	1	2	0	4	11	6	3	1	1	3	0	0	0	187	2	17	6	
89	46	56	52	120	24	95	209	204	199	86	37	124	170	107	31	154	371	145	87	
5	0	4	2	6	2	8	16	4	12	2	1	5	4	5	1	4	1	138	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.85 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.85
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 45.55629580279813 %

Printing Confusion Matrix : 

97	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	16	
0	112	4	2	3	9	8	0	0	1	0	0	2	2	1	0	0	0	0	0	
0	0	34	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	155	23	0	50	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	56	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	75	108	20	17	294	13	1	0	4	0	1	6	0	2	0	0	0	0	0	
0	0	0	0	0	0	71	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	129	3	0	0	0	0	0	0	0	0	0	0	0	
0	0	0	0	0	0	0	1	150	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	1	0	0	133	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	20	302	0	0	0	0	0	1	0	0	0	
3	138	142	142	136	57	88	17	16	11	1	351	182	16	16	1	9	1	5	7	
0	0	0	1	2	0	5	0	0	0	0	0	47	0	0	0	0	0	0	0	
1	0	2	1	2	0	4	1	2	1	1	0	4	170	2	0	0	0	0	0	
0	2	3	3	2	3	4	1	2	2	1	0	8	0	246	0	0	0	1	2	
121	10	5	6	11	1	7	6	4	9	2	2	10	27	11	364	8	1	3	115	
1	0	3	1	2	0	4	11	6	3	1	1	2	0	0	0	186	2	17	6	
89	47	57	54	123	24	97	213	210	201	89	39	125	173	109	32	155	371	146	88	
5	0	4	1	5	2	8	15	4	12	2	1	5	4	5	1	4	1	138	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.9 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.9
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 45.20986009327115 %

Printing Confusion Matrix : 

97	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	16	
0	111	4	2	3	9	8	0	0	1	0	0	2	2	1	0	0	0	0	0	
0	0	32	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	154	23	0	50	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	55	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	75	108	21	16	295	14	1	0	4	0	1	6	0	2	0	0	0	0	0	
0	0	0	0	0	0	70	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	124	3	0	0	0	0	0	0	0	0	0	0	0	
0	1	0	0	0	0	0	1	147	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	1	0	0	131	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	20	301	0	0	0	0	0	1	0	0	0	
3	138	143	142	137	56	88	17	16	11	1	351	182	16	16	1	9	1	5	7	
0	0	0	1	2	0	5	0	0	0	0	0	47	0	0	0	0	0	0	0	
1	0	2	1	2	0	4	1	1	1	1	0	4	167	2	0	0	0	0	0	
0	2	3	3	2	3	4	1	2	2	1	0	8	0	244	0	0	0	1	2	
119	10	5	6	11	1	6	6	4	9	2	2	10	28	11	364	8	1	4	115	
1	0	2	1	2	0	4	10	6	3	1	1	2	0	0	0	184	2	18	5	
91	47	59	54	124	24	97	219	214	203	90	39	125	175	111	33	157	371	147	89	
5	0	4	1	5	2	9	15	4	12	2	1	5	4	5	0	4	1	135	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	13	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.

E:\UNM\CS 529 - Intro to Machine Learning\Assignment 2\Deliverables>java -jar NaiveBayes.jar 0.95 
java -jar NaiveBayes.jar [beta_value]
Options - 
	 beta_value (optional) - value varies from 0.00001 to 1
Starting the application...
-----------------------------------------------------------------------------------------------
    -> beta value : 0.95
train.label count : 11269
test.label count  :7505
vocabularyCount count : 61188
Getting the train.label contents in the matrix [DocId, Yk]...
    -> completed!
Getting the test.label contents in the matrix [DocId, Yk]...
    -> completed!
Calculating Yk counts...
    -> completed!
Calculating Priors (pYk)...
    -> Calculation completed!
Loading train.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded train.data file!
Loading test.data file into the application in the matrix (docId, wordId, count)...
    -> Loaded test.data file!
Calculating and loading Count of all the WordIds in different Categories... (count of Xi in Yk)
    -> Xi - WordId
    -> Yk - Category/Class
    -> Calculation and loading completed!
Calculating MAPs... (MAP for P(X|Y))
    -> using P(Xi|Yk)=(count of Xi in Yk)+(beta)(total words in Yk)+((beta)*(length of vocab list)))
    -> Calculation completed
Calculating the classifications of all the documents...
    -> using Ynew=argmax[ log2(P(Yk))+(sum over i)(# of Xnewi)log2(P(Xi|Yk))]
        -> Iterations left : 7500
        -> Iterations left : 7000
        -> Iterations left : 6500
        -> Iterations left : 6000
        -> Iterations left : 5500
        -> Iterations left : 5000
        -> Iterations left : 4500
        -> Iterations left : 4000
        -> Iterations left : 3500
        -> Iterations left : 3000
        -> Iterations left : 2500
        -> Iterations left : 2000
        -> Iterations left : 1500
        -> Iterations left : 1000
        -> Iterations left : 500
        -> Iterations left : 0
    -> Calculation completed
Creating empty Confusion Matrix...
    -> created
Calculating correctly classified labels and populating Confusion Matrix
    -> completed

Accuracy of classification of test labels: 44.716855429713526 %

Printing Confusion Matrix : 

97	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	15	
0	108	5	2	3	9	8	0	0	1	0	0	2	2	1	0	0	0	0	0	
0	0	28	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	5	28	150	22	0	50	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	3	50	0	7	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	75	109	21	16	293	15	1	0	4	0	1	6	0	2	0	0	0	0	0	
0	0	0	0	0	0	68	0	0	0	0	0	1	0	0	0	0	0	0	0	
0	0	0	0	0	0	14	123	3	0	0	0	0	0	0	0	0	0	0	0	
0	1	0	0	0	0	0	1	145	0	0	0	0	0	0	0	1	0	0	0	
0	0	1	0	0	0	1	0	0	130	0	0	0	0	0	0	0	0	0	0	
1	0	0	1	0	0	1	0	0	20	299	0	0	0	0	0	1	0	0	0	
2	139	142	143	138	58	88	15	16	11	1	351	179	17	15	1	9	1	5	7	
0	0	0	1	3	0	5	0	0	0	0	0	46	0	0	0	0	0	0	0	
1	0	2	1	2	0	4	1	1	1	1	0	4	165	2	0	0	0	0	0	
0	2	3	3	2	3	5	1	2	2	1	0	8	0	244	0	0	0	1	2	
120	10	5	6	11	1	6	6	4	9	2	1	9	28	11	363	8	1	4	117	
1	0	2	1	2	0	4	10	6	3	1	1	2	0	0	0	182	2	17	5	
92	49	62	57	128	24	97	222	216	205	92	40	130	176	112	34	159	371	151	90	
4	0	4	1	5	2	9	15	4	11	2	1	5	4	5	0	4	1	132	4	
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	11	
Loading vocabulary.txt into the application...
    -> completed

Printing top 100 words with highest measure...
the of to and in that is it you they not was be for this are on as were by god we have from with but he there space or key if can will their all people who at windows what an no israel edu one do gun car would had my them window his encryption about me turkish team armenian scsi drive when so com out has your writes jews israeli jesus said file game hockey nasa chip armenians article some government db more image which use any graphics don bike clipper been other year think only then play 

Execution completed! Exiting the application.
